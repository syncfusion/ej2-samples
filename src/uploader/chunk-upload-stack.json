{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-8 control-section\">\n    <div class=\"control_wrapper\">\n        <!-- Initialize Uploader -->\n        <input type=\"file\" id=\"fileupload\" name=\"UploadFiles\">\n    </div>\n</div>\n\n<div class=\"col-lg-4 property-section\">\n    <table id=\"property\" title=\"Properties\" style=\"width: 100%;\">\n        <tbody><tr>\n            <td class=\"left-side\">Chunk size :</td>\n            <td>\n\t\t\t\t<div id=\"default\">\n\t\t\t\t\t<select id=\"chunk-sizes\"> \n\t\t\t\t\t\t<option value=\"500000\">500 KB</option>\n\t\t\t\t\t\t<option value=\"1000000\">1 MB</option>\n\t\t\t\t\t\t<option value=\"2000000\">2 MB</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n            </td>\n        </tr>\n    </tbody></table>\n</div>\n\n<style>\n    .control_wrapper {\n        max-width: 400px;\n        margin: auto;\n    }\n    .e-upload {\n        width: 100%;\n        position: relative;\n        margin-top: 15px;\n        float: none;\n    }\n    .e-upload .e-upload-actions {\n        float: none;\n        text-align: right;\n    }\n    .control_wrapper .e-upload .e-upload-drag-hover {\n        margin: 0;\n    }\n\t#auto_pause {\n\tpadding-top: 35px;\n\t}\n</style>\n\n\n\n\n</div></body></html>","index.ts":"{{ripple}}import { Uploader, RemovingEventArgs } from '@syncfusion/ej2-inputs';\nimport {  DropDownList, ChangeEventArgs  } from '@syncfusion/ej2-dropdowns';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * Chunk upload sample\n */\n\n\n    let dropElement: HTMLElement = document.getElementsByClassName('control-fluid')[0] as HTMLElement;\n    // initialize the uploader component\n    let uploadObj: Uploader = new Uploader({\n        autoUpload: false,\n        maxFileSize: 104857600,\n        asyncSettings: {\n            saveUrl: 'https://aspnetmvc.syncfusion.com/services/api/uploadbox/Save',\n            removeUrl: 'https://aspnetmvc.syncfusion.com/services/api/uploadbox/Remove',\n            chunkSize: 500000\n        },\n        removing: onFileRemove,\n        chunkFailure: onBeforeFailure,\n        dropArea: dropElement,\n        pausing: onPausing,\n        resuming: onResuming\n    });\n    uploadObj.appendTo('#fileupload');\n    let isInteraction: boolean = false;\n    // to update flag variable for automatic pause and resume\n    function onPausing(args: any): void {\n        if (args.event !== null && !navigator.onLine) {\n            isInteraction = true;\n        } else {\n            isInteraction = false;\n        }\n    }\n    // to update flag variable for automatic pause and resume\n    function onResuming(args: any): void {\n        if (args.event !== null && !navigator.onLine) {\n            isInteraction = true;\n        } else {\n            isInteraction = false;\n        }\n    }\n    function onFileRemove(args: RemovingEventArgs): void {\n        args.postRawFile = false;\n    }\n    // initialize dropdown component\n    let listObj: DropDownList = new DropDownList({\n        // set the index value to select an item based on index at initial rendering\n        index: 0,\n        // set the placeholder to DropDownList input element\n        placeholder: 'Select chunk size',\n        // set the height of the popup element\n        popupHeight: '200px',\n        // bind the change event\n         change: (e: ChangeEventArgs) => {\n            uploadObj.asyncSettings.chunkSize = parseInt(e.itemData.value, 10);\n         }\n    });\n    listObj.appendTo('#chunk-sizes');\n    // to prevent triggering chunk-upload failure event and to pause uploading on network failure\n    function onBeforeFailure(args: any): void {\n        args.cancel = !isInteraction;\n        let  uploadObj: any = (document as any).getElementById('fileupload').ej2_instances[0];\n        /* tslint:disable */\n        // interval to check network availability on every 500 milliseconds\n        let clearTimeInterval: any = setInterval(() => {\n            if (navigator.onLine && !isNullOrUndefined(uploadObj.filesData[0]) && uploadObj.filesData[0].statusCode == 4) {\n                uploadObj.resume(uploadObj.filesData);\n                clearSetInterval();\n            } else {\n                if (!isInteraction && !isNullOrUndefined(uploadObj.filesData[0]) && uploadObj.filesData[0].statusCode == 3) {\n                    uploadObj.pause(uploadObj.filesData);\n                }\n            }\n        }, 500);\n        // clear Interval after when network is available.\n        function clearSetInterval(): void {\n            clearInterval(clearTimeInterval);\n        }\n    }\n"}