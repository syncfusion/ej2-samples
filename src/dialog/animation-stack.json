{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div id=\"target\" class=\"col-lg-12 control-section\" style=\"height:100%; width:100%;\">\n    <div id=\"customization\">\n        <div class=\"animate\">\n            <button class=\"text btn-animate\" id=\"Zoom\">Zoom in/out</button>\n        </div>\n        <div class=\"animate\">\n            <button class=\"text btn-animate\" id=\"FlipXDown\">FlipX Down</button>\n        </div>\n        <div class=\"animate\">\n            <button class=\"text btn-animate\" id=\"FlipXUp\">FlipX Up</button>\n        </div>\n        <div class=\"animate\">\n            <button class=\"text btn-animate\" id=\"FlipYLeft\">FlipY Left</button>\n        </div>\n        <div class=\"animate\">\n            <button class=\"text btn-animate\" id=\"FlipYRight\">FlipY Right</button>\n        </div>\n        <div id=\"dialog\"></div>\n      </div>\n</div>\n\n  \n<style>\n    html,\n    body,    \n    #container {\n        height: 100%;\n        overflow: hidden;\n        width: 100%;\n        position: relative;\n        min-height: 400px;\n    }\n\n    .text {\n        text-transform: capitalize;\n    }\n            \n    #customization {\n        display: inline-block;\n        margin: 0 auto;\n    }\n\n    .animate {\n        display: inline-block;\n        padding: 10px;\n    }\n    .control-wrapper{\n        text-align: center;\n    }\n</style>\n\n\n</div></body></html>","index.ts":"{{ripple}}\nimport { Dialog, DialogEffect } from '@syncfusion/ej2-popups';\nimport { enableRipple } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\n/**\n * Animation Dialog sample\n */\n\n    \n  //Render Button components\n  let zoom: Button = new Button({ cssClass: 'e-outline', isPrimary: true });\n  zoom.appendTo('#Zoom');\n\n  let flipXDown: Button = new Button({ cssClass: 'e-outline', isPrimary: true });\n  flipXDown.appendTo('#FlipXDown');\n\n  let flipXUp: Button = new Button({ cssClass: 'e-outline', isPrimary: true });\n  flipXUp.appendTo('#FlipXUp');\n\n  let flipYLeft : Button = new Button({ cssClass: 'e-outline', isPrimary: true });\n  flipYLeft.appendTo('#FlipYLeft');\n\n  let flipYRight: Button = new Button({ cssClass: 'e-outline', isPrimary: true });\n  flipYRight.appendTo('#FlipYRight');\n\n  enableRipple(true);\n  // Initialization of Dialog component\n  let dialog: Dialog = new Dialog({\n      // Enables the header\n      header: 'Animation Dialog',\n      // Enables the close icon button in header\n      showCloseIcon: true,\n      // Dialog content\n      content: '<span>The dialog is configured with animation effect. It is opened or closed with \"Zoom In or Out\" animation.</span>',\n      // The Dialog shows within the target element\n      target: document.getElementById('target'),\n      width: '285px',\n      isModal: true,\n      animationSettings: { effect: 'Zoom' },\n      buttons: [{\n        click: dlgButtonClick,\n        buttonModel: { content: 'Hide', isPrimary: true }\n    }],\n  });\n  // Render initialized Dialog\n  dialog.appendTo('#dialog');\n\n  function dlgButtonClick(): void {\n      dialog.hide();\n  }\n  let list: NodeList  = document.getElementsByClassName('btn-animate');\n\n  for (let i: number = 0 ; i < list.length; i++) {\n      list[i].addEventListener('click', (e: any): void => {\n          onAnimationChange(e);\n      });\n  }\n  function onAnimationChange(e: any): void {\n    let effects: DialogEffect = e.target.id;\n    let txt: string = e.target.parentElement.innerText;\n    txt = (txt === 'Zoom In/Out') ? 'Zoom In or Out' : txt;\n    dialog.content = 'The dialog is configured with animation effect. It is opened or closed with \"' + txt + '\" animation.';\n    dialog.animationSettings = { effect: effects, duration: 400 };\n    dialog.show();\n  }\n"}