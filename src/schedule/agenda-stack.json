{"helper.ts":"import { EventRenderedArgs, View } from '@syncfusion/ej2-schedule';\n\n/**\n * Schedule util\n */\n\nexport function applyCategoryColor(args: EventRenderedArgs, currentView: View): void {\n    let categoryColor: string = args.data.CategoryColor as string;\n    if (!args.element || !categoryColor) {\n        return;\n    }\n    if (currentView === 'Agenda') {\n        (args.element.firstChild as HTMLElement).style.borderLeftColor = categoryColor;\n    } else {\n        args.element.style.backgroundColor = categoryColor;\n    }\n}\n\nexport function generateObject(start: number = new Date(2017, 6, 1).getTime(), end: number = new Date(2018, 6, 31).getTime()): Object[] {\n    let data: Object[] = [];\n    let names: string[] = [\n        'Story Time for Kids', 'Camping with Turtles', 'Wildlife Warriors', 'Parrot Talk', 'Birds of Prey', 'Croco World',\n        'Venomous Snake Hunt', 'Face Painting & Drawing events', 'Pony Rides', 'Feed the Giants', 'Jungle Treasure Hunt',\n        'Endangered Species Program', 'Black Cockatoos Playtime', 'Walk with Jungle King', 'Trained Climbers', 'Playtime with Chimpanzees',\n        'Meet a small Mammal', 'Amazon Fish Feeding', 'Elephant Ride'\n    ];\n    let dayCount: number = 1000 * 60 * 60;\n    for (let a: number = start, id: number = 1; a < end; a += (dayCount * 24) * 2) {\n        let count: number = Math.floor((Math.random() * 9) + 1);\n        for (let b: number = 0; b < count; b++) {\n            let hour: number = Math.floor(Math.random() * 100) % 24;\n            let minutes: number = Math.round((Math.floor(Math.random() * 100) % 60) / 5) * 5;\n            let nCount: number = Math.floor(Math.random() * names.length);\n            let startDate: Date = new Date(new Date(a).setHours(hour, minutes));\n            let endDate: Date = new Date(startDate.getTime() + (dayCount * 2.5));\n            data.push({\n                Id: id,\n                Subject: names[nCount],\n                StartTime: startDate,\n                EndTime: endDate,\n                IsAllDay: (id % 10) ? false : true\n            });\n            id++;\n        }\n    }\n    return data;\n}\n\nexport function getReadOnlyEventsData(): Object[] {\n    let msPerDay: number = 86400000;\n    let msPerHour: number = 3600000;\n    let currentTime: number = new Date().setMinutes(0, 0, 0);\n    let readonlyEventsData: Object[] = [\n        {\n            Id: 1,\n            Subject: 'Project Workflow Analysis',\n            StartTime: new Date(currentTime + msPerDay * -2 + msPerHour * 2),\n            EndTime: new Date(currentTime + msPerDay * -2 + msPerHour * 4),\n            IsReadonly: true\n        }, {\n            Id: 2,\n            Subject: 'Project Requirement Planning',\n            StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * 2),\n            EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * 4),\n            IsReadonly: true\n        }, {\n            Id: 3,\n            Subject: 'Meeting with Developers',\n            StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * -3),\n            EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * -1),\n            IsReadonly: true\n        }, {\n            Id: 4,\n            Subject: 'Team Fun Activities',\n            StartTime: new Date(currentTime + msPerHour * -4),\n            EndTime: new Date(currentTime + msPerHour * -2),\n            IsReadonly: true\n        }, {\n            Id: 5,\n            Subject: 'Quality Analysis',\n            StartTime: new Date(currentTime + msPerHour * 1),\n            EndTime: new Date(currentTime + msPerHour * 3),\n            IsReadonly: true\n        }, {\n            Id: 6,\n            Subject: 'Customer meeting â€“ John Mackenzie',\n            StartTime: new Date(currentTime + msPerHour * 5),\n            EndTime: new Date(currentTime + msPerHour * 6),\n            IsReadonly: false\n        }, {\n            Id: 7,\n            Subject: 'Meeting with Core team',\n            StartTime: new Date(currentTime + msPerHour * 9),\n            EndTime: new Date(currentTime + msPerHour * 10),\n            IsReadonly: false\n        }, {\n            Id: 8,\n            Subject: 'Project Review',\n            StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * 3),\n            EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * 5),\n            IsReadonly: false\n        }, {\n            Id: 9,\n            Subject: 'Project demo meeting with Andrew',\n            StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * -4),\n            EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * -3),\n            IsReadonly: false\n        }, {\n            Id: 10,\n            Subject: 'Online Hosting of Project',\n            StartTime: new Date(currentTime + msPerDay * 2 + msPerHour * 4),\n            EndTime: new Date(currentTime + msPerDay * 2 + msPerHour * 6),\n            IsReadonly: false\n        }\n    ];\n    return readonlyEventsData;\n}","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-9 control-section\">\n    <div id=\"Schedule\"></div>\n</div>\n<div class=\"col-lg-3 property-section\">\n    <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n        <tbody>\n            <tr style=\"height: 50px\">\n                <td style=\"width: 50%\">\n                    <div> Allow Virtual Scrolling\n                    </div>\n                </td>\n                <td style=\"width: 50%;\">\n                    <div>\n                        <select id=\"virtualscroll\" name=\"ddl\" style=\"padding: 6px;\">\n                            <option value=\"true\">True</option>\n                            <option value=\"false\" selected>False</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td style=\"width: 50%\">\n                    <div> Hide Empty Days\n                    </div>\n                </td>\n                <td style=\"width: 50%;\">\n                    <div>\n                        <select id=\"hideemptydays\" name=\"ddl\" style=\"padding: 6px;\">\n                            <option value=\"true\" selected>True</option>\n                            <option value=\"false\">False</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 50px\">\n                <td style=\"width: 50%\">\n                    <div> Days Count\n                    </div>\n                </td>\n                <td style=\"width: 50%;\">\n                    <div>\n                        <input id=\"agendadayscount\" type=\"text\">\n                    </div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n\n\n</div></body></html>","index.ts":"{{ripple}}\nimport { Schedule, Agenda } from '@syncfusion/ej2-schedule';\nimport { NumericTextBox, ChangeEventArgs } from '@syncfusion/ej2-inputs';\nimport { DropDownList, ChangeEventArgs as DropDownChangeArgs } from '@syncfusion/ej2-dropdowns';\nimport { generateObject } from './helper';\n\nSchedule.Inject(Agenda);\n\n/**\n * Schedule agenda sample\n */\n\n\n    \n    // Initialize schedule component\n    let scheduleObj: Schedule = new Schedule({\n        width: '100%',\n        height: '650px',\n        views: [{ option: 'Agenda', allowVirtualScrolling: false }],\n        selectedDate: new Date(2018, 1, 15),\n        currentView: 'Agenda',\n        eventSettings: { dataSource: generateObject() },\n    });\n    scheduleObj.appendTo('#Schedule');\n\n    // Initialize NumericTextBox component for agenda days count\n    let numericText: NumericTextBox = new NumericTextBox({\n        value: 7,\n        min: 1,\n        max: 15,\n        format: 'n0',\n        change: (args: ChangeEventArgs) => {\n            scheduleObj.agendaDaysCount = args.value !== null ? args.value : 7;\n            scheduleObj.dataBind();\n        }\n    });\n    numericText.appendTo('#agendadayscount');\n\n    // Initialize DropDownList component for allow virtual scroll\n    let virtualScrollDropDown: DropDownList = new DropDownList({\n        change: (args: DropDownChangeArgs) => {\n            let allowVS: boolean = (args.value === 'true') ? true : false;\n            scheduleObj.views = [{ option: 'Agenda', allowVirtualScrolling: allowVS }];\n            scheduleObj.dataBind();\n        }\n    });\n    virtualScrollDropDown.appendTo('#virtualscroll');\n\n    // Initialize DropDownList component for hide empty agenda days\n    let hideEmptyDaysDropDown: DropDownList = new DropDownList({\n        change: (args: DropDownChangeArgs) => {\n            scheduleObj.hideEmptyAgendaDays = (args.value === 'true') ? true : false;\n            scheduleObj.dataBind();\n        }\n    });\n    hideEmptyDaysDropDown.appendTo('#hideemptydays');\n\n"}