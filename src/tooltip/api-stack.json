{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-8 control-section\">\n    <!-- Tooltip element -->\n    <button id=\"default\">Show Tooltip</button>\n</div>\n\n<div class=\"col-lg-4 property-section\">\n    <table id=\"property\" title=\"Properties\">\n        <tbody>\n            <tr>\n                <td style=\"width: 50%\">\n                    <div class=\"userselect\">Content</div>\n                </td>\n                <td style=\"width: 50%;padding-right: 10px\">\n                    <div>\n                        <input id=\"value\" type=\"text\" placeholder=\"Tooltip content\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td style=\"width: 50%\">\n                    <div class=\"userselect\">Height</div>\n                </td>\n                <td style=\"width: 50%;padding-right: 10px\">\n                    <div>\n                        <input id=\"height\" type=\"text\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td style=\"width: 50%\">\n                    <div class=\"userselect\">Width</div>\n                </td>\n                <td style=\"width: 50%;padding-right: 10px\">\n                    <div>\n                        <input id=\"width\" class=\"e-input\" type=\"text\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td style=\"width: 50%\">\n                    <div class=\"userselect\">Open Mode</div>\n                </td>\n                <td style=\"width: 50%;padding-right: 10px\">\n                    <div>\n                        <input type=\"text\" tabindex=\"1\" id=\"ddlelement\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td style=\"width: 50%\">\n                    <div class=\"userselect\">Sticky Mode</div>\n                </td>\n                <td style=\"width: 50%;padding-right: 10px\">\n                    <div>\n                        <input id=\"sticky\" type=\"checkbox\">\n                    </div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n\n\n\n\n<style type=\"text/css\">\n    .userselect {\n        -webkit-user-select: none;\n        /* Safari 3.1+ */\n        -moz-user-select: none;\n        /* Firefox 2+ */\n        -ms-user-select: none;\n        /* IE 10+ */\n        user-select: none;\n        /* Standard syntax */\n    }\n\n    #property {\n        padding-top: 200px;\n    }\n\n    #default {\n        position: absolute;\n        left: calc( 50% - 60px);\n        top: 35%;\n    }\n\n    #value {\n        height: 34px;\n        width: 136px;\n        padding-left: 10px;\n    }\n\n    .highcontrast #value {\n        border: 1px solid;\n        border-width: 1px;\n        color: #fff;\n        background: #000;\n    }\n</style>\n</div></body></html>","index.ts":"{{ripple}}\n/**\n * Tooltip api sample\n */\nimport { Tooltip } from '@syncfusion/ej2-popups';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { CheckBox, Button } from '@syncfusion/ej2-buttons';\nimport { NumericTextBox } from '@syncfusion/ej2-inputs';\n//tslint:disable:max-func-body-length\n\n    \n  //Initialize Button component\n  let button: Button = new Button();\n  //Render initialized Button component\n  button.appendTo('#default');\n\n  // defined the array of data\n  let data: string[] = ['Hover', 'Click', 'Auto'];\n\n  //Initialize CheckBox component\n  let check: CheckBox = new CheckBox({\n    checked: false,\n    change: stickyChange\n  });\n  //Render initialized CheckBox component\n  check.appendTo('#sticky');\n\n  // initialize DropDownList component\n  let dropDownListObject: DropDownList = new DropDownList({\n    //set the data to dataSource property\n    dataSource: data,\n    // set placeholder to DropDownList input element\n    placeholder: 'Select mode',\n    // set change event for mode change in Tooltip\n    change: onModeChange\n  });\n  // render initialized DropDownList\n  dropDownListObject.appendTo('#ddlelement');\n\n  // initialize the Numeric Textbox for height\n  let height: NumericTextBox = new NumericTextBox({\n    //set height for Tooltip\n    value: 45,\n    // set change event for height change in Tooltip\n    change: onHeightChange\n  });\n  // render initialized Numeric Textbox\n  height.appendTo('#height');\n\n  // initialize the Numeric Textbox for width\n  let width: NumericTextBox = new NumericTextBox({\n    //set width for Tooltip\n    value: 100,\n    // set change event for width change in Tooltip\n    change: onWidthChange\n  });\n  // render initialized Numeric Textbox\n  width.appendTo('#width');\n\n  //Initialize Tooltip component\n  let tooltip: Tooltip = new Tooltip({\n    //Set tooltip content\n    content: 'Tooltip content',\n    //Set open mode for Tooltip\n    opensOn: 'Click'\n  });\n  //Render initialized Tooltip component\n  tooltip.appendTo('#default');\n\n  //change event handler for height change in Tooltip\n  function onHeightChange(args: any): void {\n    tooltip.height = args.value;\n    tooltip.refresh(tooltip.element);\n  }\n\n  //change event handler for width change in Tooltip\n  function onWidthChange(args: any): void {\n    tooltip.width = args.value;\n    tooltip.refresh(tooltip.element);\n  }\n\n  //change event handler for mode change in Tooltip\n  function onModeChange(args: any): void {\n    tooltip.opensOn = args.value;\n    tooltip.close();\n  }\n\n  //change event handler for sticky mode in Tooltip\n  function stickyChange(args: any): void {\n    tooltip.isSticky = args.checked;\n    tooltip.close();\n  }\n\n  //Attached scroll and click event listners in right pane\n  if (document.getElementById('right-pane')) {\n    document.getElementById('right-pane').addEventListener('click', onClick);\n    document.getElementById('right-pane').addEventListener('scroll', onScroll);\n  }\n\n  //scroll event handler to close Tooltip while perfomring page scroll\n  function onScroll(args: any): void {\n    if (document.getElementsByClassName('e-tooltip-wrap').length > 0) {\n      tooltip.close();\n    }\n  }\n\n  //click event handler to close Tooltip while navigating to other tabs in right pane\n  function onClick(args: any): void {\n    if (args.target.parentNode.className === 'e-tab-text') {\n      if (document.getElementsByClassName('e-tooltip-wrap').length > 0) {\n        tooltip.close();\n      }\n    }\n  }\n\n  //change event handler for content change\n  document.querySelector('#value').addEventListener('change', function (): void {\n    tooltip.content = this.value;\n    tooltip.refresh(tooltip.element);\n  });\n\n"}