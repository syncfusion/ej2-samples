{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-9 control-section\">\n    <div class=\"content-wrapper\">\n        <div class=\"schedule-demo-heading\">\n            Cheapest one way fares from Barcelona to Los Angeles\n        </div>\n        <div id=\"Schedule\">\n        </div>\n    </div>\n</div>\n\n\n\n\n\n<script id=\"event-template\" type=\"text/x-template\">\n    <div class='template-wrap'>\n        <div class='fare-detail'>$${Fare}</div>\n        <div class='airline-name' style='display:flex;padding-left:5px;'>\n            <div class=\"airline-logo ${getAirwaysImage(data.AirlineId)}\"></div>\n            <div class='airway-name'>${getAirwaysName(data.AirlineId)}</div>\n        </div>\n    </div>\n</script>\n\n<script id=\"tooltip-template\" type=\"text/x-template\">\n    <div class='event-tooltip'>\n        <div class='airline-header'>\n            <div class='airline-logo ${getAirwaysImage(data.AirlineId)}'></div>\n            <div class='airline-name'>${getAirwaysName(data.AirlineId)}</div>\n        </div>\n        <div class='airline-details text-size'>\n            <div class='airline-title'>Fare Details:</div>\n            <div class='airline-fare'>$${Fare} per person</div>\n        </div>\n        <div class='airline-flex-row text-size'>\n            <div class='airline-flex-col airline-title border-right'>Arrival</div>\n            <div class='airline-flex-col airline-title text-right'>Depature</div>\n        </div>\n        <div class='airline-flex-row text-size'>\n            <div class='airline-flex-col border-right'>${getFormattedTime(data.StartTime)}</div>\n            <div class='airline-flex-col margin-right text-right'>${getFormattedTime(data.EndTime)}</div>\n        </div>\n    </div>\n</script>\n\n\n</div></body></html>","index.ts":"{{ripple}}\nimport { extend, Internationalization, createElement, closest, remove, addClass, removeClass } from '@syncfusion/ej2-base';\nimport { CheckBox, ChangeEventArgs } from '@syncfusion/ej2-buttons';\nimport {\n    Schedule, Month, EventFieldsMapping, ActionEventArgs, ToolbarActionArgs, PopupOpenEventArgs\n} from '@syncfusion/ej2-schedule';\n\n/**\n * schedule resources group sample\n */\nSchedule.Inject(Month);\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n\n    let dManager: Object[] = [];\n    let initialLoad: Boolean = true;\n    let scheduleObj: Schedule = new Schedule({\n        width: '100%',\n        height: '650px',\n        views: ['Month'],\n        readonly: true,\n        selectedDate: new Date(2018, 3, 1),\n        resources: [{\n            field: 'AirlineId',\n            title: 'Airline',\n            name: 'Airlines',\n            allowMultiple: true,\n            dataSource: [\n                { text: 'Airways 1', id: 1 },\n                { text: 'Airways 2', id: 2 },\n                { text: 'Airways 3', id: 3 }\n            ],\n            textField: 'text', idField: 'id'\n        }],\n        eventSettings: {\n            template: '#event-template',\n            enableTooltip: true,\n            tooltipTemplate: '#tooltip-template'\n        },\n        actionBegin: (args: ActionEventArgs & ToolbarActionArgs) => {\n            if (args.requestType === 'toolbarItemRendering') {\n                args.items[2].align = 'Center';\n                args.items[2].suffixIcon = '';\n                args.items = args.items.splice(2, 1);\n            }\n        },\n        dataBinding: () => {\n            if (initialLoad) {\n                scheduleObj.eventSettings.dataSource = generateEvents(scheduleObj);\n                initialLoad = false;\n            }\n        },\n        dataBound: () => {\n            let eventCollections: Object[] = scheduleObj.getCurrentViewEvents();\n            eventCollections.sort((a: { [key: string]: Object }, b: { [key: string]: Object }) =>\n                ((<number>a.Fare) - (<number>b.Fare)));\n            let indexDate: Date = new Date((<Date>(<{ [key: string]: Object }>eventCollections[0]).StartTime).getTime());\n            indexDate.setHours(0, 0, 0, 0);\n            let index: number = scheduleObj.getIndexOfDate(scheduleObj.activeView.renderDates, indexDate);\n            let target: HTMLElement = scheduleObj.element.querySelectorAll('.e-work-cells')[index] as HTMLElement;\n            addClass([target], 'best-price');\n            target.appendChild(createElement('div', { className: 'best-price', innerHTML: 'Best Price' }));\n        },\n        popupOpen: (args: PopupOpenEventArgs) => {\n            args.cancel = true;\n        }\n    });\n    scheduleObj.appendTo('#Schedule');\n\n\n"}