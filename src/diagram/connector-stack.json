{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-9 control-section\">\n    <style>\n        .image-pattern-style {\n                    background-color: white;\n                    background-size: contain;\n                    background-repeat: no-repeat;\n                    height: 45px;\n                    width: calc((100% - 13px) / 3);\n                    cursor: pointer;\n                    border: 1px solid #D5D5D5;\n                    background-position: center;\n                    float: left;\n                }\n            \n                .image-pattern-style:hover {\n                    border-color: gray;\n                    border-width: 2px;\n                }\n            \n                .row {\n                    margin-left: 0px;\n                    margin-right: 0px;\n                }\n            \n                .row-header {\n                    font-size: 13px;\n                    font-weight: 500;\n                }\n            \n                .e-checkbox-wrapper .e-label {\n                    font-size: 12px;\n                }\n            \n                .col-xs-6 {\n                    padding-left: 0px;\n                    padding-right: 0px;\n                }\n            \n                .e-selected-style {\n                    border-color: #006CE6;\n                    border-width: 2px;\n                }\n            </style>\n    <div class=\"content-wrapper\" style=\"width:100%;background: white\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div class=\"col-lg-3 property-section\">\n    <div class=\"property-panel-header\">\n        Properties\n    </div>\n    <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row row-header\">\n            Appearance\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"straightConnector\" style=\"background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/connector/Connectors_1.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"orthogonalConnector\" style=\"background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/connector/Connectors_2.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"bezierConnector\" style=\"background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/connector/Connectors_3.png); margin-left: 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"straightConnectorWithStroke\" style=\"background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/connector/Connectors_4.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"orthogonalConnectorWithStroke\" style=\"background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/connector/Connectors_5.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"bezierConnectorWithStroke\" style=\"background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/connector/Connectors_6.png); margin-left: 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"straightConnectorWithDasharray\" style=\"background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/connector/Connectors_7.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"orthogonalConnectorWithDasharray\" style=\"background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/connector/Connectors_8.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"bezierConnectorWithDasharray\" style=\"background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/connector/Connectors_9.png); margin-left: 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"cornerRadious\" style=\"background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/connector/Connectors_10.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"sourceDecorator\" style=\"background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/connector/Connectors_11.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"sourceDecoratorWithDasharray\" style=\"background-image: url(//ej2.syncfusion.com/demos/src/diagram/Images/connector/Connectors_12.png); margin-left: 3px\">\n            </div>\n        </div>\n    </div>\n    <div class=\"row property-panel-content\" style=\"padding-top: 10px\">\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <input type=\"checkbox\" id=\"checked\" unchecked=\"false\">\n        </div>\n    </div>\n</div>\n\n\n</div></body></html>","index.ts":"{{ripple}}\n/**\n * Connector sample\n */\n\nimport {\n    Diagram, NodeModel, TextElement, HierarchicalTree, ConnectorConstraints, Segments, StackPanel, randomId,\n    SelectorConstraints, PointPortModel, ConnectorModel, PortVisibility\n} from '@syncfusion/ej2-diagrams';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEventArgs } from '@syncfusion/ej2-buttons';\n\nDiagram.Inject(HierarchicalTree);\n\nlet diagram: Diagram;\n\nfunction created(): void {\n    diagram.updateViewPort();\n}\n\n//Sets the default values of nodes\nfunction getNodeDefaults(obj: NodeModel): NodeModel {\n    if (obj.id !== 'node1') {\n        //Set ports\n        obj.ports = getPorts(obj);\n    }\n    if (obj.id !== 'node6') {\n        obj.shape = { type: 'Basic', shape: 'Rectangle', cornerRadius: 10 };\n        obj.width = 80;\n        obj.style.strokeWidth = 2;\n        obj.style.strokeColor = '#6F409F';\n        obj.height = 35;\n    }\n    return obj;\n}\n\n//Sets the default values of connectors\nfunction getConnectorDefaults(obj: ConnectorModel): ConnectorModel {\n    obj.type = 'Bezier';\n    obj.style.strokeColor = '#6f409f';\n    obj.style.strokeWidth = 2;\n    obj.targetDecorator = {\n        style: {\n            strokeColor: '#6f409f',\n            fill: '#6f409f',\n        }\n    };\n    return obj;\n}\n\nfunction setNodeTemplate(obj: NodeModel): StackPanel {\n    if (obj.id === 'node6') {\n        let canvas: StackPanel = new StackPanel();\n        canvas.id = randomId();\n        canvas.children = [];\n        canvas.style.strokeWidth = 0;\n        canvas.style.fill = '#e6e0eb';\n        canvas.children.push(getTextElement('Events', '#a6a1e0'));\n        canvas.children.push(getTextElement('Emails', '#db8ec9'));\n        canvas.children.push(getTextElement('Calls', '#db8ec9'));\n        canvas.children.push(getTextElement('Smart Contents', '#db8ec9'));\n        return canvas;\n    }\n    return null;\n}\n\n//creation of the TextElement.\nfunction getTextElement(text: string, color: string): TextElement {\n    let textElement: TextElement = new TextElement();\n    textElement.id = randomId();\n    textElement.width = 80;\n    textElement.height = 35;\n    textElement.content = text;\n    textElement.style.fill = '#6f409f';\n    textElement.style.color = 'white';\n    textElement.style.strokeColor = '#6f409f';\n    textElement.cornerRadius = 5;\n    textElement.margin = { top: 10, bottom: 10, left: 10, right: 10 };\n    textElement.relativeMode = 'Object';\n    return textElement;\n}\n\n//creation of Port for Node.\nfunction getPorts(obj: NodeModel): PointPortModel[] {\n    if (obj.id === 'node2') {\n        let node2Ports: PointPortModel[] = [\n            { id: 'port1', offset: { x: 1, y: 0.25 }, visibility: PortVisibility.Hidden },\n            { id: 'port2', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\n            { id: 'port3', offset: { x: 1, y: 0.75 }, visibility: PortVisibility.Hidden }\n        ];\n        return node2Ports;\n    } else if (obj.id === 'node6') {\n        let node6Ports: PointPortModel[] = [\n            { id: 'port4', offset: { x: 0, y: 0.46 }, visibility: PortVisibility.Hidden },\n            { id: 'port5', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden },\n            { id: 'port6', offset: { x: 0, y: 0.54 }, visibility: PortVisibility.Hidden }\n        ];\n        return node6Ports;\n    } else {\n        let ports: PointPortModel[] = [\n            { id: 'portIn', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden },\n            { id: 'portOut', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\n        ];\n        return ports;\n    }\n}\n\nfunction constraintsChange(args: CheckBoxChangeEventArgs): void {\n    let connector: ConnectorModel;\n    for (let i: number = 0; i < diagram.connectors.length; i++) {\n        connector = diagram.connectors[i];\n        if (args.checked) {\n            connector.constraints &= ~(ConnectorConstraints.DragSourceEnd\n                | ConnectorConstraints.DragTargetEnd | ConnectorConstraints.DragSegmentThumb);\n            connector.constraints |= ConnectorConstraints.ReadOnly;\n        } else {\n            connector.constraints |= ConnectorConstraints.Default & ~(ConnectorConstraints.ReadOnly);\n        }\n\n        diagram.dataBind();\n    }\n}\n\nfunction changeConnectorPattern(args: MouseEvent): void {\n    let target: HTMLElement = args.target as HTMLElement;\n\n    if (target.className === 'image-pattern-style') {\n        switch (target.id) {\n            case 'straightConnector':\n                applyConnectorStyle(false, false, false, 'Straight', target, 1);\n                break;\n            case 'orthogonalConnector':\n                applyConnectorStyle(false, false, false, 'Orthogonal', target, 1);\n                break;\n            case 'bezierConnector':\n                applyConnectorStyle(false, false, false, 'Bezier', target, 1);\n                break;\n            case 'straightConnectorWithStroke':\n                applyConnectorStyle(false, false, false, 'Straight', target);\n                break;\n            case 'orthogonalConnectorWithStroke':\n                applyConnectorStyle(false, false, false, 'Orthogonal', target);\n                break;\n            case 'bezierConnectorWithStroke':\n                applyConnectorStyle(false, false, false, 'Bezier', target);\n                break;\n            case 'straightConnectorWithDasharray':\n                applyConnectorStyle(true, false, false, 'Straight', target);\n                break;\n            case 'orthogonalConnectorWithDasharray':\n                applyConnectorStyle(true, false, false, 'Orthogonal', target);\n                break;\n            case 'bezierConnectorWithDasharray':\n                applyConnectorStyle(true, false, false, 'Bezier', target);\n                break;\n            case 'cornerRadious':\n                applyConnectorStyle(false, false, true, 'Orthogonal', target);\n                break;\n            case 'sourceDecorator':\n                applyConnectorStyle(false, true, false, 'Straight', target);\n                break;\n            case 'sourceDecoratorWithDasharray':\n                applyConnectorStyle(true, true, false, 'Straight', target);\n                break;\n        }\n    }\n}\n\n//ConnectorStyle customization\nfunction applyConnectorStyle(\n    dashedLine: boolean, sourceDec: boolean, isRounded: boolean,\n    type: Segments, target: HTMLElement, strokeWidth?: number\n): void {\n    let connector: ConnectorModel;\n    for (let i: number = 0; i < diagram.connectors.length; i++) {\n        connector = diagram.connectors[i];\n        connector.style.strokeWidth = !strokeWidth ? 2 : strokeWidth;\n        connector.type = type;\n        connector.cornerRadius = isRounded ? 5 : 0;\n        connector.style.strokeDashArray = dashedLine ? '5,5' : '';\n        if (sourceDec) {\n            connector.sourceDecorator = {\n                style: {\n                    strokeColor: '#6f409f',\n                    fill: '#6f409f', strokeWidth: 2\n                }, shape: 'Circle'\n            };\n        } else {\n            connector.sourceDecorator = { shape: 'None' };\n        }\n        connector.targetDecorator = {\n            style: {\n                strokeColor: '#6f409f',\n                fill: '#6f409f', strokeWidth: 2\n            }, shape: 'Arrow'\n        };\n        diagram.dataBind();\n    }\n\n}\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n    let bounds: ClientRect = document.getElementsByClassName('content-wrapper')[0].getBoundingClientRect();\n    let marginLeft: number = (bounds.width - 560) / 2;\n\n    //Initialize Diagram Nodes\n    let nodes: NodeModel[] = [\n        { id: 'node1', annotations: [{ content: 'Promotion' }] },\n        { id: 'node2', annotations: [{ content: 'Lead' }] },\n        { id: 'node3', annotations: [{ content: 'Account' }] },\n        { id: 'node4', annotations: [{ content: 'Information' }] },\n        { id: 'node5', annotations: [{ content: 'Opportunity' }] },\n        { id: 'node6', offsetX: marginLeft + 530, offsetY: 290, excludeFromLayout: true }\n    ];\n\n    //Initialize Diagram connectors\n    let connectors: ConnectorModel[] = [\n        { id: 'connectr', sourceID: 'node1', targetID: 'node2' },\n        { id: 'connectr1', sourceID: 'node2', sourcePortID: 'port1', targetID: 'node3', targetPortID: 'portIn' },\n        { id: 'connectr2', sourceID: 'node2', sourcePortID: 'port2', targetID: 'node4', targetPortID: 'portIn' },\n        { id: 'connectr3', sourceID: 'node2', sourcePortID: 'port3', targetID: 'node5', targetPortID: 'portIn' },\n        { id: 'connectr4', sourceID: 'node6', sourcePortID: 'port4', targetID: 'node3', targetPortID: 'portOut' },\n        { id: 'connectr5', sourceID: 'node6', sourcePortID: 'port5', targetID: 'node4', targetPortID: 'portOut' },\n        { id: 'connectr7', sourceID: 'node6', sourcePortID: 'port6', targetID: 'node5', targetPortID: 'portOut' }\n    ];\n\n    //Initializes diagram control\n    diagram = new Diagram({\n        width: '100%', height: 580, nodes: nodes,\n        connectors: connectors, selectedItems: {\n            constraints: (SelectorConstraints.ConnectorSourceThumb | SelectorConstraints.ConnectorTargetThumb)\n        },\n        //Configrues hierarchical tree layout\n        layout: {\n            type: 'HierarchicalTree', orientation: 'LeftToRight',\n            verticalSpacing: 75, margin: { left: marginLeft, right: 0, top: 0, bottom: 0 }\n        },\n        created: created,\n        snapSettings: { constraints: 0 },\n        //Sets the default values of nodes\n        getNodeDefaults: getNodeDefaults,\n        //Sets the default values of connectors\n        getConnectorDefaults: getConnectorDefaults,\n        //Customize the content of the node\n        setNodeTemplate: setNodeTemplate,\n    });\n    diagram.appendTo('#diagram');\n\n    //checkbox is used to enable or disable the connector interaction.\n    let checkBoxObj: CheckBox = new CheckBox({\n        checked: false,\n        label: 'Lock',\n        change: constraintsChange\n    });\n    checkBoxObj.appendTo('#checked');\n\n    //Click Event for Appearance of the layout.\n    document.getElementById('appearance').onclick = changeConnectorPattern;\n\n\n"}